mod color_processing;
mod file_processing;
mod utilities;

use std::env;
use clap::Parser;
use png_color_converter::utilities::{round_down, round_up};


fn main() {
    let args: Vec<String> = env::args().collect();
    //let data
    //let dst: Vec<&[i32]> = data.chunks(8).collect();
    //file_reader(&args[1]);
    // file_writer(&args[2]);
    let rgba = color_processing::Rgba {
        r: 133,
        g: 205,
        b: 33,
        a: 255,
    };
    dbg!(color_processing::calculate_hsl_from_rgb(&rgba));
}
