use std::fs::File;
use std::io::BufWriter;
use std::path::Path;
use png::Reader;

fn file_reader(filepath: &String) {
    let decoder = png::Decoder::new(File::open(filepath).unwrap());
    let mut reader = decoder.read_info().unwrap();
    let mut buf = vec![0; reader.output_buffer_size()];
    let info = reader.next_frame(&mut buf).unwrap();
    let bytes = &buf[..info.buffer_size()];
    let in_animation = reader.info().frame_control().is_some();
    dbg!(bytes);
}

fn file_writer(filepath: &String) {
    let path = Path::new(filepath);
    let file = File::create(path).unwrap();
    let ref mut w = BufWriter::new(file);

    let mut encoder = png::Encoder::new(w, 16, 16);
    encoder.set_color(png::ColorType::Rgba);
    encoder.set_depth(png::BitDepth::Eight);

    let mut writer = encoder.write_header().unwrap();
    //let mut data: [u8; 1024] = [0,0,0,0,0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    6,    33,    55,    255,    28,    59,    82,    255,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    6,    33,    55,    255,    122,    200,    255,    255,    168,    233,    255,    255,    28,    59,    82,    255,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    19,    33,    255,    122,    200,    255,    255,    51,    161,    240,    255,    122,    200,    255,    255,    168,    233,    255,    255,    28,    59,    82,    255,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    6,    33,    55,    255,    51,    161,    240,    255,    51,    161,    240,    255,    18,    68,    106,    255,    56,    116,    160,    255,    122,    200,    255,    255,    122,    200,    255,    255,    28,    59,    82,    255,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    6,    33,    55,    255,    122,    200,    255,    255,    51,    161,    240,    255,    18,    68,    106,    255,    51,    161,    240,    255,    168,    233,    255,    255,    56,    116,    160,    255,    122,    200,    255,    255,    168,    233,    255,    255,    28,    59,    82,    255,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    6,    33,    55,    255,    51,    161,    240,    255,    18,    68,    106,    255,    51,    161,    240,    255,    122,    200,    255,    255,    122,    200,    255,    255,    168,    233,    255,    255,    18,    68,    106,    255,    51,    161,    240,    255,    6,    33,    55,    255,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    19,    33,    255,    51,    161,    240,    255,    18,    68,    106,    255,    122,    200,    255,    255,    122,    200,    255,    255,    122,    200,    255,    255,    51,    161,    240,    255,    18,    68,    106,    255,    51,    161,    240,    255,    28,    59,    82,    255,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    6,    33,    55,    255,    51,    161,    240,    255,    56,    116,    160,    255,    122,    200,    255,    255,    122,    200,    255,    255,    51,    161,    240,    255,    51,    161,    240,    255,    18,    68,    106,    255,    122,    200,    255,    255,    6,    33,    55,    255,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    19,    33,    255,    122,    200,    255,    255,    56,    116,    160,    255,    122,    200,    255,    255,    51,    161,    240,    255,    51,    161,    240,    255,    51,    161,    240,    255,    56,    116,    160,    255,    51,    161,    240,    255,    6,    33,    55,    255,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    28,    59,    82,    255,    122,    200,    255,    255,    56,    116,    160,    255,    51,    161,    240,    255,    51,    161,    240,    255,    51,    161,    240,    255,    122,    200,    255,    255,    18,    68,    106,    255,    51,    161,    240,    255,    1,    19,    33,    255,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    28,    59,    82,    255,    17,    88,    219,    255,    17,    88,    219,    255,    18,    68,    106,    255,    51,    161,    240,    255,    122,    200,    255,    255,    18,    68,    106,    255,    51,    161,    240,    255,    122,    200,    255,    255,    6,    33,    55,    255,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    19,    33,    255,    51,    161,    240,    255,    17,    88,    219,    255,    56,    116,    160,    255,    18,    68,    106,    255,    51,    161,    240,    255,    122,    200,    255,    255,    6,    33,    55,    255,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    19,    33,    255,    51,    161,    240,    255,    17,    88,    219,    255,    51,    161,    240,    255,    51,    161,    240,    255,    1,    19,    33,    255,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    19,    33,    255,    17,    88,    219,    255,    51,    161,    240,    255,    6,    33,    55,    255,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    19,    33,    255,    1,    19,    33,    255,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,];
    let mut data: [u8; 1024] = [0; 1024];
    let init = [255, 255, 255, 255, 255, 255, 255, 255];
    data[..init.len()].copy_from_slice(&init);
    //    for i in 0..data.len() {
    //       if data[i] != 0 {
    //            data[i] = data[i].wrapping_add(5);
    //        }
    //    }
    writer.write_image_data(&data).unwrap();
}